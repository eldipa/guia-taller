# Import from the environment the variable INDOCKER.
# Then, compare it with "1" if it doesn't match stop with
# a message error.
# INDOCKER should be set to "1" to signal that we are running Tup
# in the correct docker so we can be sure that all the commands and
# scripts here will be run using the tools in the docker container
import INDOCKER
ifneq (1,$(INDOCKER))
error Stop! You must be in the container for developing.
endif

# Preprocess the first input file (%1f) with Jinja2 and output
# the resulting file into %1o.
#
# The preprocessing takes optionally a second input file (%2f)
# that it should be a data file (yaml, json) from where Jinja2 will
# read the variables that may control the preprocessing.
# If no second input file is given, Jinja2 will use the environment variables.
!j2md = |> j2 --customize scripts/j2-md.py %1f %2f > %1o |>  | ^scripts/__pycache__/* ^dbg/

!j2cpp = |> j2 --customize scripts/j2-cpp.py %1f %2f > %1o |>  | ^scripts/__pycache__/* ^dbg/

# Compile the given input Markdown file (%1f) into a standalone Tex file (%1o)
# using Pandoc and filtered with Pandoc Filters.
#
# Use a custom include-in-headers file.
# See tex.sh for more info about the parameters
#
!tex = |> ./scripts/tex.sh %1f %1o |> | ^dbg/

# Compile the given input Tex file (%1f) into a PDF with LatexMK (xelatex)
# The output-directory is set by the second argument of pdf.sh (passed
# not here)
!pdf = |> ./scripts/pdf.sh %1f  |> | ^dbg/


# Format/preprocess the given C/C++ file (%1f) and output the result (%1o)
!fmtcpp = |> ./scripts/fmtcpp.sh %1f %1o |> | ^dbg/

!fmtpng = |> ./scripts/fmtpng.sh %1f %1o |> | ^dbg/

# Preprocess all the Markdown files in parts/ with Jinja2
#
#   parts/*.j2.md  -->  out/parts/md/*.md
#
# NOTE: the following *requires* that there are not subfolder
# inside parts/
# This is because we use %g and not %B in the output filename
# We cannot use %B because it only strips the first extension
# (xxx.j2.md -> xxx.j2) and we need the basename (xxx)
: foreach parts/*.j2.md | <srcgroup> <zgroup> |> !j2md |> out/parts/md/%g.md

# Preprocess all the source code (C/C++ files) in src/ with a
# formatter first (out/t/src) and then with Jinja2 (out/src)
# The <tsrcgroup> and <srcgroup> group associate the main directory
# with the output files so they can be a dependency of other rules
# that are over other directories (Tup requires this to know about
# dependencies cross multiple directories).
: foreach src/*.j2.c |> !fmtcpp |> out/t/src/%g.j2.c <srcgroup>
: foreach src/*.j2.h |> !fmtcpp |> out/t/src/%g.j2.h <srcgroup>
: foreach src/*.j2.cpp |> !fmtcpp |> out/t/src/%g.j2.cpp <srcgroup>

: foreach out/t/src/*.j2.c |> !j2cpp |> out/src/%g.c <srcgroup>
: foreach out/t/src/*.j2.h |> !j2cpp |> out/src/%g.h <srcgroup>
: foreach out/t/src/*.j2.cpp |> !j2cpp |> out/src/%g.cpp <srcgroup>

# Preprocess the PNG files
: foreach z/img/xkcd/*.png |> !fmtpng |> out/z/img/xkcd/%g.png <zgroup>
: foreach z/img/emoji/*.png |> !fmtpng |> out/z/img/emoji/%g.png <zgroup>
: foreach z/img/*.png |> !fmtpng |> out/z/img/%g.png <zgroup>

# Compile each Markdown file into a separated Tex file with Pandoc
# as an independent "standalone" Tex file.
#
#   out/parts/md/*.md  -->  out/parts/tex/*.tex
#
: foreach out/parts/md/*.md |> !tex  |> out/parts/tex/%B.tex

# Compile each standalone Tex file into a separated PDF file with LatexMK
#
#   out/parts/tex/*.tex  -->  out/parts/pdf/*.pdf
#
: foreach out/parts/tex/*.tex |> !pdf out/parts/pdf/  |> out/parts/pdf/%B.pdf out/parts/pdf/%B.aux out/parts/pdf/%B.fdb_latexmk out/parts/pdf/%B.fls out/parts/pdf/%B.log out/parts/pdf/%B.xdv out/parts/pdf/%B.console_log   out/parts/pdf/%B.bcf out/parts/pdf/%B.run.xml out/parts/pdf/%B.blg out/parts/pdf/%B.bbl out/parts/pdf/%B.snippets out/parts/pdf/%B.pygmented


# Ensamble the Markdown files into a single "main" Markdown with Jinja2
#
#   out/parts/md/*.md  -->  out/main/md/textbook-main.md
#
: main/textbook-main.j2.md main/index.yaml out/parts/md/*.md |> !j2md |> out/main/md/textbook-main.md

# Compile the "ensambled" Markdown file into the final Tex file with Pandoc
# as a "standalone" file. Then, compile it into a PDF with LatexMK
#
#   out/main/md/textbook-main.md   -->  out/main/tex/textbook-main.tex
#   out/main/tex/textbook-main.tex  -->  out/main/pdf/textbook-main.pdf
#
: out/main/md/textbook-main.md  |> !tex   |> out/main/tex/%1B.tex
: out/main/tex/textbook-main.tex |> !pdf out/main/pdf/  |> out/main/pdf/%B.pdf out/main/pdf/%B.aux out/main/pdf/%B.fdb_latexmk out/main/pdf/%B.fls out/main/pdf/%B.log out/main/pdf/%B.xdv out/main/pdf/%B.console_log  out/main/pdf/%B.bcf out/main/pdf/%B.run.xml  out/main/pdf/%B.blg  out/main/pdf/%B.bbl out/main/pdf/%B.snippets out/main/pdf/%B.pygmented


#: |> scripts/build-latex-env.sh |>

# TUP cheatsheet
# ===============
#
# %f represents the input file name;
# %o the output file name;
# %B the basename of the input (no extension, no directory)
# %g the matched glob of a foreach



